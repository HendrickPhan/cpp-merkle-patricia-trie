// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/merkle_patricia_trie.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fmerkle_5fpatricia_5ftrie_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fmerkle_5fpatricia_5ftrie_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fmerkle_5fpatricia_5ftrie_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fmerkle_5fpatricia_5ftrie_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto;
namespace merkle_patricia_trie {
class MPTFullNode;
class MPTFullNodeDefaultTypeInternal;
extern MPTFullNodeDefaultTypeInternal _MPTFullNode_default_instance_;
class MPTNode;
class MPTNodeDefaultTypeInternal;
extern MPTNodeDefaultTypeInternal _MPTNode_default_instance_;
class MPTShortNode;
class MPTShortNodeDefaultTypeInternal;
extern MPTShortNodeDefaultTypeInternal _MPTShortNode_default_instance_;
}  // namespace merkle_patricia_trie
PROTOBUF_NAMESPACE_OPEN
template<> ::merkle_patricia_trie::MPTFullNode* Arena::CreateMaybeMessage<::merkle_patricia_trie::MPTFullNode>(Arena*);
template<> ::merkle_patricia_trie::MPTNode* Arena::CreateMaybeMessage<::merkle_patricia_trie::MPTNode>(Arena*);
template<> ::merkle_patricia_trie::MPTShortNode* Arena::CreateMaybeMessage<::merkle_patricia_trie::MPTShortNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace merkle_patricia_trie {

enum MPTNODE_TYPE : int {
  FULL = 0,
  SHORT = 1,
  VALUE = 2,
  MPTNODE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MPTNODE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MPTNODE_TYPE_IsValid(int value);
constexpr MPTNODE_TYPE MPTNODE_TYPE_MIN = FULL;
constexpr MPTNODE_TYPE MPTNODE_TYPE_MAX = VALUE;
constexpr int MPTNODE_TYPE_ARRAYSIZE = MPTNODE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MPTNODE_TYPE_descriptor();
template<typename T>
inline const std::string& MPTNODE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MPTNODE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MPTNODE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MPTNODE_TYPE_descriptor(), enum_t_value);
}
inline bool MPTNODE_TYPE_Parse(
    const std::string& name, MPTNODE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MPTNODE_TYPE>(
    MPTNODE_TYPE_descriptor(), name, value);
}
// ===================================================================

class MPTNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:merkle_patricia_trie.MPTNode) */ {
 public:
  inline MPTNode() : MPTNode(nullptr) {};
  virtual ~MPTNode();

  MPTNode(const MPTNode& from);
  MPTNode(MPTNode&& from) noexcept
    : MPTNode() {
    *this = ::std::move(from);
  }

  inline MPTNode& operator=(const MPTNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPTNode& operator=(MPTNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MPTNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPTNode* internal_default_instance() {
    return reinterpret_cast<const MPTNode*>(
               &_MPTNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MPTNode& a, MPTNode& b) {
    a.Swap(&b);
  }
  inline void Swap(MPTNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MPTNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MPTNode* New() const final {
    return CreateMaybeMessage<MPTNode>(nullptr);
  }

  MPTNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MPTNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MPTNode& from);
  void MergeFrom(const MPTNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPTNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "merkle_patricia_trie.MPTNode";
  }
  protected:
  explicit MPTNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto);
    return ::descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .merkle_patricia_trie.MPTNODE_TYPE type = 1;
  void clear_type();
  ::merkle_patricia_trie::MPTNODE_TYPE type() const;
  void set_type(::merkle_patricia_trie::MPTNODE_TYPE value);
  private:
  ::merkle_patricia_trie::MPTNODE_TYPE _internal_type() const;
  void _internal_set_type(::merkle_patricia_trie::MPTNODE_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:merkle_patricia_trie.MPTNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmerkle_5fpatricia_5ftrie_2eproto;
};
// -------------------------------------------------------------------

class MPTFullNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:merkle_patricia_trie.MPTFullNode) */ {
 public:
  inline MPTFullNode() : MPTFullNode(nullptr) {};
  virtual ~MPTFullNode();

  MPTFullNode(const MPTFullNode& from);
  MPTFullNode(MPTFullNode&& from) noexcept
    : MPTFullNode() {
    *this = ::std::move(from);
  }

  inline MPTFullNode& operator=(const MPTFullNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPTFullNode& operator=(MPTFullNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MPTFullNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPTFullNode* internal_default_instance() {
    return reinterpret_cast<const MPTFullNode*>(
               &_MPTFullNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MPTFullNode& a, MPTFullNode& b) {
    a.Swap(&b);
  }
  inline void Swap(MPTFullNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MPTFullNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MPTFullNode* New() const final {
    return CreateMaybeMessage<MPTFullNode>(nullptr);
  }

  MPTFullNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MPTFullNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MPTFullNode& from);
  void MergeFrom(const MPTFullNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPTFullNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "merkle_patricia_trie.MPTFullNode";
  }
  protected:
  explicit MPTFullNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto);
    return ::descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated bytes nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  const std::string& nodes(int index) const;
  std::string* mutable_nodes(int index);
  void set_nodes(int index, const std::string& value);
  void set_nodes(int index, std::string&& value);
  void set_nodes(int index, const char* value);
  void set_nodes(int index, const void* value, size_t size);
  std::string* add_nodes();
  void add_nodes(const std::string& value);
  void add_nodes(std::string&& value);
  void add_nodes(const char* value);
  void add_nodes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nodes();
  private:
  const std::string& _internal_nodes(int index) const;
  std::string* _internal_add_nodes();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:merkle_patricia_trie.MPTFullNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmerkle_5fpatricia_5ftrie_2eproto;
};
// -------------------------------------------------------------------

class MPTShortNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:merkle_patricia_trie.MPTShortNode) */ {
 public:
  inline MPTShortNode() : MPTShortNode(nullptr) {};
  virtual ~MPTShortNode();

  MPTShortNode(const MPTShortNode& from);
  MPTShortNode(MPTShortNode&& from) noexcept
    : MPTShortNode() {
    *this = ::std::move(from);
  }

  inline MPTShortNode& operator=(const MPTShortNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPTShortNode& operator=(MPTShortNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MPTShortNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPTShortNode* internal_default_instance() {
    return reinterpret_cast<const MPTShortNode*>(
               &_MPTShortNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MPTShortNode& a, MPTShortNode& b) {
    a.Swap(&b);
  }
  inline void Swap(MPTShortNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MPTShortNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MPTShortNode* New() const final {
    return CreateMaybeMessage<MPTShortNode>(nullptr);
  }

  MPTShortNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MPTShortNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MPTShortNode& from);
  void MergeFrom(const MPTShortNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPTShortNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "merkle_patricia_trie.MPTShortNode";
  }
  protected:
  explicit MPTShortNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto);
    return ::descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:merkle_patricia_trie.MPTShortNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fmerkle_5fpatricia_5ftrie_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MPTNode

// .merkle_patricia_trie.MPTNODE_TYPE type = 1;
inline void MPTNode::clear_type() {
  type_ = 0;
}
inline ::merkle_patricia_trie::MPTNODE_TYPE MPTNode::_internal_type() const {
  return static_cast< ::merkle_patricia_trie::MPTNODE_TYPE >(type_);
}
inline ::merkle_patricia_trie::MPTNODE_TYPE MPTNode::type() const {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTNode.type)
  return _internal_type();
}
inline void MPTNode::_internal_set_type(::merkle_patricia_trie::MPTNODE_TYPE value) {
  
  type_ = value;
}
inline void MPTNode::set_type(::merkle_patricia_trie::MPTNODE_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTNode.type)
}

// bytes data = 2;
inline void MPTNode::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MPTNode::data() const {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTNode.data)
  return _internal_data();
}
inline void MPTNode::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTNode.data)
}
inline std::string* MPTNode::mutable_data() {
  // @@protoc_insertion_point(field_mutable:merkle_patricia_trie.MPTNode.data)
  return _internal_mutable_data();
}
inline const std::string& MPTNode::_internal_data() const {
  return data_.Get();
}
inline void MPTNode::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MPTNode::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:merkle_patricia_trie.MPTNode.data)
}
inline void MPTNode::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:merkle_patricia_trie.MPTNode.data)
}
inline void MPTNode::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:merkle_patricia_trie.MPTNode.data)
}
inline std::string* MPTNode::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MPTNode::release_data() {
  // @@protoc_insertion_point(field_release:merkle_patricia_trie.MPTNode.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MPTNode::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:merkle_patricia_trie.MPTNode.data)
}
inline std::string* MPTNode::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:merkle_patricia_trie.MPTNode.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MPTNode::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:merkle_patricia_trie.MPTNode.data)
}

// -------------------------------------------------------------------

// MPTFullNode

// repeated bytes nodes = 1;
inline int MPTFullNode::_internal_nodes_size() const {
  return nodes_.size();
}
inline int MPTFullNode::nodes_size() const {
  return _internal_nodes_size();
}
inline void MPTFullNode::clear_nodes() {
  nodes_.Clear();
}
inline std::string* MPTFullNode::add_nodes() {
  // @@protoc_insertion_point(field_add_mutable:merkle_patricia_trie.MPTFullNode.nodes)
  return _internal_add_nodes();
}
inline const std::string& MPTFullNode::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const std::string& MPTFullNode::nodes(int index) const {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTFullNode.nodes)
  return _internal_nodes(index);
}
inline std::string* MPTFullNode::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:merkle_patricia_trie.MPTFullNode.nodes)
  return nodes_.Mutable(index);
}
inline void MPTFullNode::set_nodes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTFullNode.nodes)
  nodes_.Mutable(index)->assign(value);
}
inline void MPTFullNode::set_nodes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTFullNode.nodes)
  nodes_.Mutable(index)->assign(std::move(value));
}
inline void MPTFullNode::set_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::set_nodes(int index, const void* value, size_t size) {
  nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:merkle_patricia_trie.MPTFullNode.nodes)
}
inline std::string* MPTFullNode::_internal_add_nodes() {
  return nodes_.Add();
}
inline void MPTFullNode::add_nodes(const std::string& value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::add_nodes(std::string&& value) {
  nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::add_nodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::add_nodes(const void* value, size_t size) {
  nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:merkle_patricia_trie.MPTFullNode.nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MPTFullNode::nodes() const {
  // @@protoc_insertion_point(field_list:merkle_patricia_trie.MPTFullNode.nodes)
  return nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MPTFullNode::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:merkle_patricia_trie.MPTFullNode.nodes)
  return &nodes_;
}

// bytes value = 2;
inline void MPTFullNode::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MPTFullNode::value() const {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTFullNode.value)
  return _internal_value();
}
inline void MPTFullNode::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTFullNode.value)
}
inline std::string* MPTFullNode::mutable_value() {
  // @@protoc_insertion_point(field_mutable:merkle_patricia_trie.MPTFullNode.value)
  return _internal_mutable_value();
}
inline const std::string& MPTFullNode::_internal_value() const {
  return value_.Get();
}
inline void MPTFullNode::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MPTFullNode::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:merkle_patricia_trie.MPTFullNode.value)
}
inline void MPTFullNode::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:merkle_patricia_trie.MPTFullNode.value)
}
inline void MPTFullNode::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:merkle_patricia_trie.MPTFullNode.value)
}
inline std::string* MPTFullNode::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MPTFullNode::release_value() {
  // @@protoc_insertion_point(field_release:merkle_patricia_trie.MPTFullNode.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MPTFullNode::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:merkle_patricia_trie.MPTFullNode.value)
}
inline std::string* MPTFullNode::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:merkle_patricia_trie.MPTFullNode.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MPTFullNode::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:merkle_patricia_trie.MPTFullNode.value)
}

// -------------------------------------------------------------------

// MPTShortNode

// bytes key = 1;
inline void MPTShortNode::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MPTShortNode::key() const {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTShortNode.key)
  return _internal_key();
}
inline void MPTShortNode::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTShortNode.key)
}
inline std::string* MPTShortNode::mutable_key() {
  // @@protoc_insertion_point(field_mutable:merkle_patricia_trie.MPTShortNode.key)
  return _internal_mutable_key();
}
inline const std::string& MPTShortNode::_internal_key() const {
  return key_.Get();
}
inline void MPTShortNode::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MPTShortNode::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:merkle_patricia_trie.MPTShortNode.key)
}
inline void MPTShortNode::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:merkle_patricia_trie.MPTShortNode.key)
}
inline void MPTShortNode::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:merkle_patricia_trie.MPTShortNode.key)
}
inline std::string* MPTShortNode::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MPTShortNode::release_key() {
  // @@protoc_insertion_point(field_release:merkle_patricia_trie.MPTShortNode.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MPTShortNode::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:merkle_patricia_trie.MPTShortNode.key)
}
inline std::string* MPTShortNode::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:merkle_patricia_trie.MPTShortNode.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MPTShortNode::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:merkle_patricia_trie.MPTShortNode.key)
}

// bytes value = 2;
inline void MPTShortNode::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MPTShortNode::value() const {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTShortNode.value)
  return _internal_value();
}
inline void MPTShortNode::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTShortNode.value)
}
inline std::string* MPTShortNode::mutable_value() {
  // @@protoc_insertion_point(field_mutable:merkle_patricia_trie.MPTShortNode.value)
  return _internal_mutable_value();
}
inline const std::string& MPTShortNode::_internal_value() const {
  return value_.Get();
}
inline void MPTShortNode::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MPTShortNode::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:merkle_patricia_trie.MPTShortNode.value)
}
inline void MPTShortNode::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:merkle_patricia_trie.MPTShortNode.value)
}
inline void MPTShortNode::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:merkle_patricia_trie.MPTShortNode.value)
}
inline std::string* MPTShortNode::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MPTShortNode::release_value() {
  // @@protoc_insertion_point(field_release:merkle_patricia_trie.MPTShortNode.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MPTShortNode::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:merkle_patricia_trie.MPTShortNode.value)
}
inline std::string* MPTShortNode::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:merkle_patricia_trie.MPTShortNode.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MPTShortNode::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:merkle_patricia_trie.MPTShortNode.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace merkle_patricia_trie

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::merkle_patricia_trie::MPTNODE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::merkle_patricia_trie::MPTNODE_TYPE>() {
  return ::merkle_patricia_trie::MPTNODE_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fmerkle_5fpatricia_5ftrie_2eproto
