// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/merkle_patricia_trie.proto

#include "merkle_patricia_trie.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace merkle_patricia_trie {
class MPTNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPTNode> _instance;
} _MPTNode_default_instance_;
class MPTFullNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPTFullNode> _instance;
} _MPTFullNode_default_instance_;
class MPTShortNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPTShortNode> _instance;
} _MPTShortNode_default_instance_;
}  // namespace merkle_patricia_trie
static void InitDefaultsscc_info_MPTFullNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::merkle_patricia_trie::_MPTFullNode_default_instance_;
    new (ptr) ::merkle_patricia_trie::MPTFullNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::merkle_patricia_trie::MPTFullNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MPTFullNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MPTFullNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto}, {}};

static void InitDefaultsscc_info_MPTNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::merkle_patricia_trie::_MPTNode_default_instance_;
    new (ptr) ::merkle_patricia_trie::MPTNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::merkle_patricia_trie::MPTNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MPTNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MPTNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto}, {}};

static void InitDefaultsscc_info_MPTShortNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::merkle_patricia_trie::_MPTShortNode_default_instance_;
    new (ptr) ::merkle_patricia_trie::MPTShortNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::merkle_patricia_trie::MPTShortNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MPTShortNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MPTShortNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fmerkle_5fpatricia_5ftrie_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fmerkle_5fpatricia_5ftrie_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fmerkle_5fpatricia_5ftrie_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fmerkle_5fpatricia_5ftrie_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::merkle_patricia_trie::MPTNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::merkle_patricia_trie::MPTNode, type_),
  PROTOBUF_FIELD_OFFSET(::merkle_patricia_trie::MPTNode, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::merkle_patricia_trie::MPTFullNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::merkle_patricia_trie::MPTFullNode, nodes_),
  PROTOBUF_FIELD_OFFSET(::merkle_patricia_trie::MPTFullNode, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::merkle_patricia_trie::MPTShortNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::merkle_patricia_trie::MPTShortNode, key_),
  PROTOBUF_FIELD_OFFSET(::merkle_patricia_trie::MPTShortNode, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::merkle_patricia_trie::MPTNode)},
  { 7, -1, sizeof(::merkle_patricia_trie::MPTFullNode)},
  { 14, -1, sizeof(::merkle_patricia_trie::MPTShortNode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::merkle_patricia_trie::_MPTNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::merkle_patricia_trie::_MPTFullNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::merkle_patricia_trie::_MPTShortNode_default_instance_),
};

const char descriptor_table_protodef_proto_2fmerkle_5fpatricia_5ftrie_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n proto/merkle_patricia_trie.proto\022\024merk"
  "le_patricia_trie\"I\n\007MPTNode\0220\n\004type\030\001 \001("
  "\0162\".merkle_patricia_trie.MPTNODE_TYPE\022\014\n"
  "\004data\030\002 \001(\014\"+\n\013MPTFullNode\022\r\n\005nodes\030\001 \003("
  "\014\022\r\n\005value\030\002 \001(\014\"*\n\014MPTShortNode\022\013\n\003key\030"
  "\001 \001(\014\022\r\n\005value\030\002 \001(\014*.\n\014MPTNODE_TYPE\022\010\n\004"
  "FULL\020\000\022\t\n\005SHORT\020\001\022\t\n\005VALUE\020\002B<\n2com.meta"
  "_node.protos.compiled.merkle_patricia_tr"
  "ieZ\006/protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto_sccs[3] = {
  &scc_info_MPTFullNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto.base,
  &scc_info_MPTNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto.base,
  &scc_info_MPTShortNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto = {
  false, false, descriptor_table_protodef_proto_2fmerkle_5fpatricia_5ftrie_2eproto, "proto/merkle_patricia_trie.proto", 338,
  &descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto_once, descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto_sccs, descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_proto_2fmerkle_5fpatricia_5ftrie_2eproto::offsets,
  file_level_metadata_proto_2fmerkle_5fpatricia_5ftrie_2eproto, 3, file_level_enum_descriptors_proto_2fmerkle_5fpatricia_5ftrie_2eproto, file_level_service_descriptors_proto_2fmerkle_5fpatricia_5ftrie_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fmerkle_5fpatricia_5ftrie_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto)), true);
namespace merkle_patricia_trie {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MPTNODE_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fmerkle_5fpatricia_5ftrie_2eproto);
  return file_level_enum_descriptors_proto_2fmerkle_5fpatricia_5ftrie_2eproto[0];
}
bool MPTNODE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MPTNode::InitAsDefaultInstance() {
}
class MPTNode::_Internal {
 public:
};

MPTNode::MPTNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:merkle_patricia_trie.MPTNode)
}
MPTNode::MPTNode(const MPTNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:merkle_patricia_trie.MPTNode)
}

void MPTNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MPTNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

MPTNode::~MPTNode() {
  // @@protoc_insertion_point(destructor:merkle_patricia_trie.MPTNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MPTNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MPTNode::ArenaDtor(void* object) {
  MPTNode* _this = reinterpret_cast< MPTNode* >(object);
  (void)_this;
}
void MPTNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MPTNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPTNode& MPTNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPTNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto.base);
  return *internal_default_instance();
}


void MPTNode::Clear() {
// @@protoc_insertion_point(message_clear_start:merkle_patricia_trie.MPTNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPTNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .merkle_patricia_trie.MPTNODE_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::merkle_patricia_trie::MPTNODE_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MPTNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:merkle_patricia_trie.MPTNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .merkle_patricia_trie.MPTNODE_TYPE type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:merkle_patricia_trie.MPTNode)
  return target;
}

size_t MPTNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:merkle_patricia_trie.MPTNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .merkle_patricia_trie.MPTNODE_TYPE type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPTNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:merkle_patricia_trie.MPTNode)
  GOOGLE_DCHECK_NE(&from, this);
  const MPTNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MPTNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:merkle_patricia_trie.MPTNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:merkle_patricia_trie.MPTNode)
    MergeFrom(*source);
  }
}

void MPTNode::MergeFrom(const MPTNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:merkle_patricia_trie.MPTNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void MPTNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:merkle_patricia_trie.MPTNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPTNode::CopyFrom(const MPTNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:merkle_patricia_trie.MPTNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPTNode::IsInitialized() const {
  return true;
}

void MPTNode::InternalSwap(MPTNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPTNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MPTFullNode::InitAsDefaultInstance() {
}
class MPTFullNode::_Internal {
 public:
};

MPTFullNode::MPTFullNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:merkle_patricia_trie.MPTFullNode)
}
MPTFullNode::MPTFullNode(const MPTFullNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:merkle_patricia_trie.MPTFullNode)
}

void MPTFullNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MPTFullNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MPTFullNode::~MPTFullNode() {
  // @@protoc_insertion_point(destructor:merkle_patricia_trie.MPTFullNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MPTFullNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MPTFullNode::ArenaDtor(void* object) {
  MPTFullNode* _this = reinterpret_cast< MPTFullNode* >(object);
  (void)_this;
}
void MPTFullNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MPTFullNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPTFullNode& MPTFullNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPTFullNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto.base);
  return *internal_default_instance();
}


void MPTFullNode::Clear() {
// @@protoc_insertion_point(message_clear_start:merkle_patricia_trie.MPTFullNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPTFullNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nodes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MPTFullNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:merkle_patricia_trie.MPTFullNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes nodes = 1;
  for (int i = 0, n = this->_internal_nodes_size(); i < n; i++) {
    const auto& s = this->_internal_nodes(i);
    target = stream->WriteBytes(1, s, target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:merkle_patricia_trie.MPTFullNode)
  return target;
}

size_t MPTFullNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:merkle_patricia_trie.MPTFullNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes nodes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nodes_.size());
  for (int i = 0, n = nodes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      nodes_.Get(i));
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPTFullNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:merkle_patricia_trie.MPTFullNode)
  GOOGLE_DCHECK_NE(&from, this);
  const MPTFullNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MPTFullNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:merkle_patricia_trie.MPTFullNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:merkle_patricia_trie.MPTFullNode)
    MergeFrom(*source);
  }
}

void MPTFullNode::MergeFrom(const MPTFullNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:merkle_patricia_trie.MPTFullNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void MPTFullNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:merkle_patricia_trie.MPTFullNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPTFullNode::CopyFrom(const MPTFullNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:merkle_patricia_trie.MPTFullNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPTFullNode::IsInitialized() const {
  return true;
}

void MPTFullNode::InternalSwap(MPTFullNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MPTFullNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MPTShortNode::InitAsDefaultInstance() {
}
class MPTShortNode::_Internal {
 public:
};

MPTShortNode::MPTShortNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:merkle_patricia_trie.MPTShortNode)
}
MPTShortNode::MPTShortNode(const MPTShortNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:merkle_patricia_trie.MPTShortNode)
}

void MPTShortNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MPTShortNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MPTShortNode::~MPTShortNode() {
  // @@protoc_insertion_point(destructor:merkle_patricia_trie.MPTShortNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MPTShortNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MPTShortNode::ArenaDtor(void* object) {
  MPTShortNode* _this = reinterpret_cast< MPTShortNode* >(object);
  (void)_this;
}
void MPTShortNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MPTShortNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPTShortNode& MPTShortNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPTShortNode_proto_2fmerkle_5fpatricia_5ftrie_2eproto.base);
  return *internal_default_instance();
}


void MPTShortNode::Clear() {
// @@protoc_insertion_point(message_clear_start:merkle_patricia_trie.MPTShortNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPTShortNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MPTShortNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:merkle_patricia_trie.MPTShortNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:merkle_patricia_trie.MPTShortNode)
  return target;
}

size_t MPTShortNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:merkle_patricia_trie.MPTShortNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPTShortNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:merkle_patricia_trie.MPTShortNode)
  GOOGLE_DCHECK_NE(&from, this);
  const MPTShortNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MPTShortNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:merkle_patricia_trie.MPTShortNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:merkle_patricia_trie.MPTShortNode)
    MergeFrom(*source);
  }
}

void MPTShortNode::MergeFrom(const MPTShortNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:merkle_patricia_trie.MPTShortNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void MPTShortNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:merkle_patricia_trie.MPTShortNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPTShortNode::CopyFrom(const MPTShortNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:merkle_patricia_trie.MPTShortNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPTShortNode::IsInitialized() const {
  return true;
}

void MPTShortNode::InternalSwap(MPTShortNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MPTShortNode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace merkle_patricia_trie
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::merkle_patricia_trie::MPTNode* Arena::CreateMaybeMessage< ::merkle_patricia_trie::MPTNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::merkle_patricia_trie::MPTNode >(arena);
}
template<> PROTOBUF_NOINLINE ::merkle_patricia_trie::MPTFullNode* Arena::CreateMaybeMessage< ::merkle_patricia_trie::MPTFullNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::merkle_patricia_trie::MPTFullNode >(arena);
}
template<> PROTOBUF_NOINLINE ::merkle_patricia_trie::MPTShortNode* Arena::CreateMaybeMessage< ::merkle_patricia_trie::MPTShortNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::merkle_patricia_trie::MPTShortNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
