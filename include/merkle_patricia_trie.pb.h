// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: merkle_patricia_trie.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_merkle_5fpatricia_5ftrie_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_merkle_5fpatricia_5ftrie_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_merkle_5fpatricia_5ftrie_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_merkle_5fpatricia_5ftrie_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_merkle_5fpatricia_5ftrie_2eproto;
namespace merkle_patricia_trie {
class MPTFullNode;
struct MPTFullNodeDefaultTypeInternal;
extern MPTFullNodeDefaultTypeInternal _MPTFullNode_default_instance_;
class MPTNode;
struct MPTNodeDefaultTypeInternal;
extern MPTNodeDefaultTypeInternal _MPTNode_default_instance_;
class MPTShortNode;
struct MPTShortNodeDefaultTypeInternal;
extern MPTShortNodeDefaultTypeInternal _MPTShortNode_default_instance_;
}  // namespace merkle_patricia_trie
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace merkle_patricia_trie {
enum MPTNODE_TYPE : int {
  FULL = 0,
  SHORT = 1,
  VALUE = 2,
  MPTNODE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MPTNODE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MPTNODE_TYPE_IsValid(int value);
extern const uint32_t MPTNODE_TYPE_internal_data_[];
constexpr MPTNODE_TYPE MPTNODE_TYPE_MIN = static_cast<MPTNODE_TYPE>(0);
constexpr MPTNODE_TYPE MPTNODE_TYPE_MAX = static_cast<MPTNODE_TYPE>(2);
constexpr int MPTNODE_TYPE_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
MPTNODE_TYPE_descriptor();
template <typename T>
const std::string& MPTNODE_TYPE_Name(T value) {
  static_assert(std::is_same<T, MPTNODE_TYPE>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MPTNODE_TYPE_Name().");
  return MPTNODE_TYPE_Name(static_cast<MPTNODE_TYPE>(value));
}
template <>
inline const std::string& MPTNODE_TYPE_Name(MPTNODE_TYPE value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MPTNODE_TYPE_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MPTNODE_TYPE_Parse(absl::string_view name, MPTNODE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MPTNODE_TYPE>(
      MPTNODE_TYPE_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MPTShortNode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:merkle_patricia_trie.MPTShortNode) */ {
 public:
  inline MPTShortNode() : MPTShortNode(nullptr) {}
  ~MPTShortNode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MPTShortNode(
      ::google::protobuf::internal::ConstantInitialized);

  inline MPTShortNode(const MPTShortNode& from) : MPTShortNode(nullptr, from) {}
  inline MPTShortNode(MPTShortNode&& from) noexcept
      : MPTShortNode(nullptr, std::move(from)) {}
  inline MPTShortNode& operator=(const MPTShortNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPTShortNode& operator=(MPTShortNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MPTShortNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MPTShortNode* internal_default_instance() {
    return reinterpret_cast<const MPTShortNode*>(
        &_MPTShortNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MPTShortNode& a, MPTShortNode& b) { a.Swap(&b); }
  inline void Swap(MPTShortNode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MPTShortNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MPTShortNode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MPTShortNode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MPTShortNode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MPTShortNode& from) { MPTShortNode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MPTShortNode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "merkle_patricia_trie.MPTShortNode"; }

 protected:
  explicit MPTShortNode(::google::protobuf::Arena* arena);
  MPTShortNode(::google::protobuf::Arena* arena, const MPTShortNode& from);
  MPTShortNode(::google::protobuf::Arena* arena, MPTShortNode&& from) noexcept
      : MPTShortNode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:merkle_patricia_trie.MPTShortNode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MPTShortNode_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MPTShortNode& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_merkle_5fpatricia_5ftrie_2eproto;
};
// -------------------------------------------------------------------

class MPTNode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:merkle_patricia_trie.MPTNode) */ {
 public:
  inline MPTNode() : MPTNode(nullptr) {}
  ~MPTNode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MPTNode(
      ::google::protobuf::internal::ConstantInitialized);

  inline MPTNode(const MPTNode& from) : MPTNode(nullptr, from) {}
  inline MPTNode(MPTNode&& from) noexcept
      : MPTNode(nullptr, std::move(from)) {}
  inline MPTNode& operator=(const MPTNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPTNode& operator=(MPTNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MPTNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MPTNode* internal_default_instance() {
    return reinterpret_cast<const MPTNode*>(
        &_MPTNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MPTNode& a, MPTNode& b) { a.Swap(&b); }
  inline void Swap(MPTNode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MPTNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MPTNode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MPTNode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MPTNode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MPTNode& from) { MPTNode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MPTNode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "merkle_patricia_trie.MPTNode"; }

 protected:
  explicit MPTNode(::google::protobuf::Arena* arena);
  MPTNode(::google::protobuf::Arena* arena, const MPTNode& from);
  MPTNode(::google::protobuf::Arena* arena, MPTNode&& from) noexcept
      : MPTNode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .merkle_patricia_trie.MPTNODE_TYPE type = 1;
  void clear_type() ;
  ::merkle_patricia_trie::MPTNODE_TYPE type() const;
  void set_type(::merkle_patricia_trie::MPTNODE_TYPE value);

  private:
  ::merkle_patricia_trie::MPTNODE_TYPE _internal_type() const;
  void _internal_set_type(::merkle_patricia_trie::MPTNODE_TYPE value);

  public:
  // @@protoc_insertion_point(class_scope:merkle_patricia_trie.MPTNode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MPTNode_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MPTNode& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_merkle_5fpatricia_5ftrie_2eproto;
};
// -------------------------------------------------------------------

class MPTFullNode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:merkle_patricia_trie.MPTFullNode) */ {
 public:
  inline MPTFullNode() : MPTFullNode(nullptr) {}
  ~MPTFullNode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MPTFullNode(
      ::google::protobuf::internal::ConstantInitialized);

  inline MPTFullNode(const MPTFullNode& from) : MPTFullNode(nullptr, from) {}
  inline MPTFullNode(MPTFullNode&& from) noexcept
      : MPTFullNode(nullptr, std::move(from)) {}
  inline MPTFullNode& operator=(const MPTFullNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPTFullNode& operator=(MPTFullNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MPTFullNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MPTFullNode* internal_default_instance() {
    return reinterpret_cast<const MPTFullNode*>(
        &_MPTFullNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MPTFullNode& a, MPTFullNode& b) { a.Swap(&b); }
  inline void Swap(MPTFullNode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MPTFullNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MPTFullNode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MPTFullNode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MPTFullNode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MPTFullNode& from) { MPTFullNode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MPTFullNode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "merkle_patricia_trie.MPTFullNode"; }

 protected:
  explicit MPTFullNode(::google::protobuf::Arena* arena);
  MPTFullNode(::google::protobuf::Arena* arena, const MPTFullNode& from);
  MPTFullNode(::google::protobuf::Arena* arena, MPTFullNode&& from) noexcept
      : MPTFullNode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodesFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated bytes nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  const std::string& nodes(int index) const;
  std::string* mutable_nodes(int index);
  void set_nodes(int index, const std::string& value);
  void set_nodes(int index, std::string&& value);
  void set_nodes(int index, const char* value);
  void set_nodes(int index, const void* value, std::size_t size);
  void set_nodes(int index, absl::string_view value);
  std::string* add_nodes();
  void add_nodes(const std::string& value);
  void add_nodes(std::string&& value);
  void add_nodes(const char* value);
  void add_nodes(const void* value, std::size_t size);
  void add_nodes(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& nodes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_nodes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_nodes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_nodes();

  public:
  // bytes value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:merkle_patricia_trie.MPTFullNode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MPTFullNode_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MPTFullNode& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> nodes_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_merkle_5fpatricia_5ftrie_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MPTNode

// .merkle_patricia_trie.MPTNODE_TYPE type = 1;
inline void MPTNode::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::merkle_patricia_trie::MPTNODE_TYPE MPTNode::type() const {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTNode.type)
  return _internal_type();
}
inline void MPTNode::set_type(::merkle_patricia_trie::MPTNODE_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTNode.type)
}
inline ::merkle_patricia_trie::MPTNODE_TYPE MPTNode::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::merkle_patricia_trie::MPTNODE_TYPE>(_impl_.type_);
}
inline void MPTNode::_internal_set_type(::merkle_patricia_trie::MPTNODE_TYPE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// bytes data = 2;
inline void MPTNode::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MPTNode::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTNode.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MPTNode::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTNode.data)
}
inline std::string* MPTNode::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:merkle_patricia_trie.MPTNode.data)
  return _s;
}
inline const std::string& MPTNode::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void MPTNode::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* MPTNode::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* MPTNode::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:merkle_patricia_trie.MPTNode.data)
  return _impl_.data_.Release();
}
inline void MPTNode::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:merkle_patricia_trie.MPTNode.data)
}

// -------------------------------------------------------------------

// MPTFullNode

// repeated bytes nodes = 1;
inline int MPTFullNode::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int MPTFullNode::nodes_size() const {
  return _internal_nodes_size();
}
inline void MPTFullNode::clear_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodes_.Clear();
}
inline std::string* MPTFullNode::add_nodes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_nodes()->Add();
  // @@protoc_insertion_point(field_add_mutable:merkle_patricia_trie.MPTFullNode.nodes)
  return _s;
}
inline const std::string& MPTFullNode::nodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTFullNode.nodes)
  return _internal_nodes().Get(index);
}
inline std::string* MPTFullNode::mutable_nodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:merkle_patricia_trie.MPTFullNode.nodes)
  return _internal_mutable_nodes()->Mutable(index);
}
inline void MPTFullNode::set_nodes(int index, const std::string& value) {
  _internal_mutable_nodes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::set_nodes(int index, std::string&& value) {
  _internal_mutable_nodes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::set_nodes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_nodes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::set_nodes(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_nodes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::set_nodes(int index, absl::string_view value) {
  _internal_mutable_nodes()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::add_nodes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_nodes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::add_nodes(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_nodes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::add_nodes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_nodes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::add_nodes(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_nodes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:merkle_patricia_trie.MPTFullNode.nodes)
}
inline void MPTFullNode::add_nodes(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_nodes()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:merkle_patricia_trie.MPTFullNode.nodes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MPTFullNode::nodes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:merkle_patricia_trie.MPTFullNode.nodes)
  return _internal_nodes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MPTFullNode::mutable_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:merkle_patricia_trie.MPTFullNode.nodes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MPTFullNode::_internal_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MPTFullNode::_internal_mutable_nodes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nodes_;
}

// bytes value = 2;
inline void MPTFullNode::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& MPTFullNode::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTFullNode.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MPTFullNode::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTFullNode.value)
}
inline std::string* MPTFullNode::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:merkle_patricia_trie.MPTFullNode.value)
  return _s;
}
inline const std::string& MPTFullNode::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void MPTFullNode::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* MPTFullNode::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* MPTFullNode::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:merkle_patricia_trie.MPTFullNode.value)
  return _impl_.value_.Release();
}
inline void MPTFullNode::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:merkle_patricia_trie.MPTFullNode.value)
}

// -------------------------------------------------------------------

// MPTShortNode

// bytes key = 1;
inline void MPTShortNode::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& MPTShortNode::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTShortNode.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MPTShortNode::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTShortNode.key)
}
inline std::string* MPTShortNode::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:merkle_patricia_trie.MPTShortNode.key)
  return _s;
}
inline const std::string& MPTShortNode::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void MPTShortNode::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* MPTShortNode::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* MPTShortNode::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:merkle_patricia_trie.MPTShortNode.key)
  return _impl_.key_.Release();
}
inline void MPTShortNode::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:merkle_patricia_trie.MPTShortNode.key)
}

// bytes value = 2;
inline void MPTShortNode::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& MPTShortNode::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:merkle_patricia_trie.MPTShortNode.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MPTShortNode::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:merkle_patricia_trie.MPTShortNode.value)
}
inline std::string* MPTShortNode::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:merkle_patricia_trie.MPTShortNode.value)
  return _s;
}
inline const std::string& MPTShortNode::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void MPTShortNode::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* MPTShortNode::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* MPTShortNode::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:merkle_patricia_trie.MPTShortNode.value)
  return _impl_.value_.Release();
}
inline void MPTShortNode::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:merkle_patricia_trie.MPTShortNode.value)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace merkle_patricia_trie


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::merkle_patricia_trie::MPTNODE_TYPE> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::merkle_patricia_trie::MPTNODE_TYPE>() {
  return ::merkle_patricia_trie::MPTNODE_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_merkle_5fpatricia_5ftrie_2eproto_2epb_2eh
